package com.example.k_trader;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.job.JobInfo;
import android.app.job.JobParameters;
import android.app.job.JobScheduler;
import android.app.job.JobService;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import com.example.k_trader.base.GlobalSettings;
import com.example.k_trader.base.Log4jHelper;
import com.example.k_trader.base.OrderManager;
import com.example.k_trader.base.TradeData;
import com.example.k_trader.base.TradeDataManager;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import static com.example.k_trader.base.TradeDataManager.Status.PLACED;
import static com.example.k_trader.base.TradeDataManager.Status.PROCESSED;
import static com.example.k_trader.base.TradeDataManager.Type.BUY;
import static com.example.k_trader.base.TradeDataManager.Type.NONE;
import static com.example.k_trader.base.TradeDataManager.Type.SELL;

/**
 * Created by 김무창 on 2017-12-17.
 */

public class TradeJobService extends JobService {

    private static final int PRICE_SAVING_QUEUE_COUNT = 60;  // 1시간 분량의 시장가를 저장해 두고 분석에 사용한다.
    private static final int SELL_SLOT_LOOK_ASIDE_MAX = 3; // 3 단계 위까지 매도점을 찾아본다.
    private static final int BUY_SLOT_LOOK_ASIDE_MAX = 3;
    private static final double TRADING_VALUE_MIN = 0.0001;

    private double krwBalance;

    public static int currentPrice;                  // 비트코인 현재 시장가
    public static long lastNotiTimeInMillis;        // 마지막 Notification 완료 시점
    public static double availableBtcBalance;       // 현재 판매 가능한 비트코인 총량 = 현재 보유중인 비트코인 총량 - 매도 중인 비트코인 총량

    private TradeDataManager placedOrderManager = new TradeDataManager();
    private static TradeDataManager processedOrderManager = new TradeDataManager();

    private static List<Integer> priceQueue = new ArrayList<>();
    private static org.apache.log4j.Logger logger = Log4jHelper.getLogger("TradeJobService");
    private Context ctx;
    private OrderManager orderManager;

    @Override
    public boolean onStartJob(final JobParameters jobParameters) {
        new Thread() {
            public void run() {
                ctx = TradeJobService.this;
                orderManager = new OrderManager();

                try {
                    tradeBusinessLogic();
                } catch (Exception e) {}

                if (jobParameters.getJobId() == MainPage.JOB_ID_REGULAR)
                    scheduleRefresh();
                jobFinished(jobParameters, false);
            }
        }.start();

        // return true because new thread started.
        return true;
    }

    @Override
    public boolean onStopJob(JobParameters jobParameters) {
        return false;
    }

    private void log_info(final String log) {
        if (logger != null) {
            logger.info(log);
        }

        Intent intent = new Intent(MainPage.BROADCAST_LOG_MESSAGE);
        intent.putExtra("log", log);
        if (MainPage.context != null) {
            LocalBroadcastManager manager = LocalBroadcastManager.getInstance(MainPage.context);
            if (manager != null)
                manager.sendBroadcast(intent);
        }
    }

    private void scheduleRefresh() {
        JobScheduler mJobScheduler = (JobScheduler)getApplicationContext().getSystemService(JOB_SCHEDULER_SERVICE);
        JobInfo.Builder mJobBuilder = new JobInfo.Builder(MainPage.JOB_ID_REGULAR, new ComponentName(getPackageName(), TradeJobService.class.getName()));

        /* For Android N and Upper Versions */
        mJobBuilder
                .setMinimumLatency(GlobalSettings.getInstance().getTradeInterval() * 1000)
                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);

        if (mJobScheduler != null && mJobScheduler.schedule(mJobBuilder.build()) <= JobScheduler.RESULT_FAILURE) {
            //Scheduled Failed/LOG or run fail safe measures
            log_info("Unable to schedule trade job!");
        }
    }

    private void notificationTrade(String title, String text) {
        Resources res = getResources();

        Intent notificationIntent = new Intent(this, MainActivity.class);
//        notificationIntent.putExtra("notificationId", "1212"); //전달할 값
        notificationIntent.setAction(Intent.ACTION_MAIN);
        notificationIntent.addCategory(Intent.CATEGORY_LAUNCHER);
        notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);

        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, "my_channel_id_03");

        builder.setContentTitle(title)
                .setContentText(text)
                .setTicker(text)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setLargeIcon(BitmapFactory.decodeResource(res, R.mipmap.ic_launcher))
                .setContentIntent(contentIntent)
                .setAutoCancel(true)
                .setWhen(System.currentTimeMillis())
                .setDefaults(Notification.DEFAULT_ALL);

        builder.setCategory(Notification.CATEGORY_MESSAGE)
//                .setPriority(Notification.PRIORITY_HIGH)
                .setVisibility(Notification.VISIBILITY_PUBLIC);

        NotificationManager nm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

        // 안드로이드 8.0 이상 노티피케이션을 사용하기 위해서는 하나 이상의 알림 채널을 만들어야한다.
        NotificationChannel notificationChannel = new NotificationChannel("my_channel_id_03", "My Notifications", NotificationManager.IMPORTANCE_DEFAULT);

        // Configure the notification channel.
        notificationChannel.setDescription("Channel description");
        notificationChannel.enableLights(true);
        notificationChannel.setLightColor(Color.RED);
        // 거래 체결시 진동 소리만으로도 다른 Android noti와 구분할 수 있도록 전용 진동 패턴을 사용한다.
        notificationChannel.setVibrationPattern(new long[]{0, 100, 100, 100, 100, 100});
        notificationChannel.enableVibration(true);
        nm.createNotificationChannel(notificationChannel);

        if (nm != null)
            nm.notify((int)System.currentTimeMillis(), builder.build());
    }

    private TradeDataManager.Type convertSearchType(int search) {
        switch(search) {
            case 1 : return BUY;
            case 2 : return SELL;
        }
        return NONE;
    }

    // 1시간 동안 시장가 변동폭을 구해 리턴한다.
    private float getPriceVariationRate() {
        int maxPrice = Collections.max(priceQueue);
        int minPrice = Collections.min(priceQueue);

        int minIndex = priceQueue.indexOf(minPrice);
        int maxIndex = priceQueue.indexOf(maxPrice);

        if (minIndex < maxIndex) {
            // 상승
            return ((maxPrice / (float)minPrice ) - 1) * 100;
        } else {
            // 하락
            return ((minPrice / (float)maxPrice ) - 1) * 100;
        }
    }

    private List<TradeData> mergeSamePrice(List<TradeData> list) {
        Iterator<TradeData> i = list.iterator();
        List<TradeData> newList = new ArrayList<>();

        while (i.hasNext()) {
            TradeData outer = i.next();
            boolean skip = false;

            for (TradeData inner : newLi